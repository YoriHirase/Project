package perbankan;

import java.util.*;
import java.sql.*;
import javax.swing.*;
import static javax.swing.JOptionPane.*;
import javax.swing.table.DefaultTableModel;

public class Home extends javax.swing.JFrame {

    /**
     * Creates new form Home
     */
    String loggedInUser;
    String loggedInUID;
    String db_url = "jdbc:mysql://localhost:3306/cees";
    String db_user = "root";
    String db_password = "";

    public Home() {
        initComponents();
        loggedInUser = userSession.getUsername();
        loggedInUID = userSession.getRekening();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    public void setUser(String name) {
        user.setText(name);
    }

    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        user = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        btnCekPin = new javax.swing.JButton();
        btnCekSaldo = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtArea = new javax.swing.JTextArea();
        btnTarikTunai = new javax.swing.JButton();
        btnCekMutasi = new javax.swing.JButton();
        btnResetPin = new javax.swing.JButton();
        btnSetorTunai = new javax.swing.JButton();
        btnTransfer = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Selamat Datang");

        user.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        user.setText("[NAMA PENGGUNA]");

        jButton1.setText("Logout");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        btnCekPin.setText("Cek Pin");
        btnCekPin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCekPinActionPerformed(evt);
            }
        });

        btnCekSaldo.setText("Cek Saldo");
        btnCekSaldo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCekSaldoActionPerformed(evt);
            }
        });

        txtArea.setColumns(20);
        txtArea.setRows(5);
        jScrollPane1.setViewportView(txtArea);

        btnTarikTunai.setText("Tarik Tunai");
        btnTarikTunai.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTarikTunaiActionPerformed(evt);
            }
        });

        btnCekMutasi.setText("Cek Mutasi");
        btnCekMutasi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCekMutasiActionPerformed(evt);
            }
        });

        btnResetPin.setText("Reset Pin");
        btnResetPin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetPinActionPerformed(evt);
            }
        });

        btnSetorTunai.setText("Setor Tunai");
        btnSetorTunai.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSetorTunaiActionPerformed(evt);
            }
        });

        btnTransfer.setText("Transfer");
        btnTransfer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTransferActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 327, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(btnCekPin, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnCekSaldo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnTarikTunai, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(39, 39, 39)
                        .addComponent(btnTransfer)
                        .addGap(33, 33, 33)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(btnCekMutasi, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnResetPin, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnSetorTunai, javax.swing.GroupLayout.Alignment.LEADING))))
                .addGap(0, 30, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(user, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(user)
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnCekPin)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnCekSaldo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnTarikTunai))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnCekMutasi)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnResetPin)
                            .addComponent(btnTransfer))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSetorTunai)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addGap(18, 18, 18))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        LoginFrame LF = new LoginFrame();
        LF.setVisible(true);
        LF.pack();
        LF.setLocationRelativeTo(null);
        this.dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void btnCekPinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCekPinActionPerformed
        String savedPin = userSession.getPin();
        txtArea.setText("PIN Anda: " + savedPin);
    }//GEN-LAST:event_btnCekPinActionPerformed

    private void btnCekSaldoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCekSaldoActionPerformed

        try (Connection conn = DriverManager.getConnection(db_url, db_user, db_password)) {
            loggedInUser = userSession.getUsername();

            String query = "SELECT saldo FROM userdata WHERE username = ?";
            try (PreparedStatement stmt = conn.prepareStatement(query)) {
                stmt.setString(1, loggedInUser);

                try (ResultSet rs = stmt.executeQuery()) {
                    if (rs.next()) {
                        double saldo = rs.getDouble("saldo");
                        txtArea.setText("Saldo Anda: Rp " + saldo);
                    } else {
                        txtArea.setText("Data pengguna tidak ditemukan!");
                    }
                }
            }
        } catch (SQLException e) {
            txtArea.setText("Terjadi kesalahan: " + e.getMessage());
        }
    }//GEN-LAST:event_btnCekSaldoActionPerformed

    private void btnTarikTunaiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTarikTunaiActionPerformed
        String inputAmount = JOptionPane.showInputDialog(this, "Masukkan jumlah yang ingin ditarik:", "Tarik Saldo", JOptionPane.PLAIN_MESSAGE);

        if (inputAmount == null || inputAmount.trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Jumlah tidak boleh kosong!", "Peringatan", JOptionPane.WARNING_MESSAGE);
            return;
        }

        int tarikAmount;
        try {
            tarikAmount = Integer.parseInt(inputAmount.trim());
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Jumlah harus berupa angka!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (tarikAmount <= 0) {
            JOptionPane.showMessageDialog(this, "Jumlah harus lebih besar dari 0!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        String loggedInUser = userSession.getUsername();
        String url = "jdbc:mysql://localhost:3306/cees";
        String user = "root";
        String password = "";

        try (Connection conn = DriverManager.getConnection(url, user, password)) {
            String selectQuery = "SELECT saldo FROM userdata WHERE username = ?";
            PreparedStatement selectStmt = conn.prepareStatement(selectQuery);
            selectStmt.setString(1, loggedInUser);
            ResultSet rs = selectStmt.executeQuery();

            if (rs.next()) {
                int currentSaldo = rs.getInt("saldo");

                if (tarikAmount > currentSaldo) {
                    JOptionPane.showMessageDialog(this, "Saldo tidak cukup!", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                int confirm = JOptionPane.showConfirmDialog(this, "Anda akan menarik saldo sebesar " + tarikAmount + ". Lanjutkan?",
                        "Konfirmasi Tarik Saldo", JOptionPane.YES_NO_OPTION);
                if (confirm != JOptionPane.YES_OPTION) {
                    return; 
                }

                int newSaldo = currentSaldo - tarikAmount;
                String updateQuery = "UPDATE userdata SET saldo = ? WHERE username = ?";
                PreparedStatement updateStmt = conn.prepareStatement(updateQuery);
                updateStmt.setInt(1, newSaldo);
                updateStmt.setString(2, loggedInUser);

                int rowsUpdated = updateStmt.executeUpdate();
                if (rowsUpdated > 0) {
                    String insertMutasiQuery = "INSERT INTO transaksi (username, jenis_transaksi, nominal, tanggal) VALUES (?, ?, ?, NOW())";
                    PreparedStatement mutasiStmt = conn.prepareStatement(insertMutasiQuery);
                    mutasiStmt.setString(1, loggedInUser);
                    mutasiStmt.setString(2, "Tarik");
                    mutasiStmt.setInt(3, tarikAmount);
                    mutasiStmt.executeUpdate();

                    JOptionPane.showMessageDialog(this, "Saldo berhasil ditarik! Saldo saat ini: " + newSaldo, "Sukses", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(this, "Gagal menarik saldo!", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Terjadi kesalahan: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnTarikTunaiActionPerformed

    private void btnCekMutasiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCekMutasiActionPerformed
        String username = userSession.getUsername();

        if (username != null && !username.isEmpty()) {
            tableMutasi tm = new tableMutasi(username);
            tm.setVisible(true);
        } else {
            JOptionPane.showMessageDialog(null, "Gagal mendapatkan informasi pengguna. Silakan login ulang.");
        }
    }//GEN-LAST:event_btnCekMutasiActionPerformed

    private void btnResetPinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetPinActionPerformed
        String newPin = JOptionPane.showInputDialog(this, "Masukkan PIN baru:", "Reset PIN", JOptionPane.PLAIN_MESSAGE);

        if (newPin == null || newPin.trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "PIN baru tidak boleh kosong!", "Peringatan", JOptionPane.WARNING_MESSAGE);
            return;
        }

        String loggedInUser = userSession.getUsername();
        String url = "jdbc:mysql://localhost:3306/cees";
        String user = "root";
        String password = "";

        try (Connection conn = DriverManager.getConnection(url, user, password)) {
            String query = "UPDATE userdata SET password = ? WHERE username = ?";
            try (PreparedStatement stmt = conn.prepareStatement(query)) {
                stmt.setString(1, newPin);
                stmt.setString(2, loggedInUser);

                int rowsUpdated = stmt.executeUpdate();
                if (rowsUpdated > 0) {
                    JOptionPane.showMessageDialog(this, "PIN berhasil diubah!", "Sukses", JOptionPane.INFORMATION_MESSAGE);
                    userSession.setPin(newPin);
                } else {
                    JOptionPane.showMessageDialog(this, "Gagal mengubah PIN!", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Terjadi kesalahan: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnResetPinActionPerformed

    private void btnSetorTunaiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSetorTunaiActionPerformed
        String inputAmount = JOptionPane.showInputDialog(this, "Masukkan jumlah yang ingin disetor:", "Setor Saldo", JOptionPane.PLAIN_MESSAGE);

        if (inputAmount == null || inputAmount.trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Jumlah tidak boleh kosong!", "Peringatan", JOptionPane.WARNING_MESSAGE);
            return;
        }

        int setorAmount;
        try {
            setorAmount = Integer.parseInt(inputAmount.trim());
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Jumlah harus berupa angka!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (setorAmount <= 0) {
            JOptionPane.showMessageDialog(this, "Jumlah harus lebih besar dari 0!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        String loggedInUser = userSession.getUsername();
        String url = "jdbc:mysql://localhost:3306/cees";
        String user = "root";
        String password = "";

        try (Connection conn = DriverManager.getConnection(url, user, password)) {
            conn.setAutoCommit(false); 

            String selectQuery = "SELECT saldo FROM userdata WHERE username = ?";
            PreparedStatement selectStmt = conn.prepareStatement(selectQuery);
            selectStmt.setString(1, loggedInUser);
            ResultSet rs = selectStmt.executeQuery();

            if (!rs.next()) {
                JOptionPane.showMessageDialog(this, "Pengguna tidak ditemukan!", "Error", JOptionPane.ERROR_MESSAGE);
                conn.rollback();
                return;
            }

            int currentSaldo = rs.getInt("saldo");
            int newSaldo = currentSaldo + setorAmount;

            String updateQuery = "UPDATE userdata SET saldo = ? WHERE username = ?";
            PreparedStatement updateStmt = conn.prepareStatement(updateQuery);
            updateStmt.setInt(1, newSaldo);
            updateStmt.setString(2, loggedInUser);
            updateStmt.executeUpdate();

            String insertMutasiQuery = "INSERT INTO transaksi (username, jenis_transaksi, nominal, tanggal) VALUES (?, ?, ?, NOW())";
            PreparedStatement insertStmt = conn.prepareStatement(insertMutasiQuery);
            insertStmt.setString(1, loggedInUser);
            insertStmt.setString(2, "Setor");
            insertStmt.setInt(3, setorAmount);
            insertStmt.executeUpdate();

            conn.commit();
            JOptionPane.showMessageDialog(this, "Setor tunai berhasil! Saldo saat ini: " + newSaldo, "Sukses", JOptionPane.INFORMATION_MESSAGE);
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Terjadi kesalahan: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnSetorTunaiActionPerformed

    private void btnTransferActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTransferActionPerformed
        String usernamePengirim = userSession.getUsername();
        String usernamePenerima = JOptionPane.showInputDialog(this, "Masukkan username penerima:");

        if (usernamePenerima == null || usernamePenerima.trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Username penerima tidak boleh kosong!", "Peringatan", JOptionPane.WARNING_MESSAGE);
            return;
        }

        String inputNominal = JOptionPane.showInputDialog(this, "Masukkan jumlah yang ingin ditransfer:");
        if (inputNominal == null || inputNominal.trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Jumlah transfer tidak boleh kosong!", "Peringatan", JOptionPane.WARNING_MESSAGE);
            return;
        }

        int nominal;
        try {
            nominal = Integer.parseInt(inputNominal.trim());
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Jumlah harus berupa angka!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (nominal <= 0) {
            JOptionPane.showMessageDialog(this, "Jumlah transfer harus lebih besar dari 0!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        String url = "jdbc:mysql://localhost:3306/cees";
        String user = "root";
        String password = "";

        try (Connection conn = DriverManager.getConnection(url, user, password)) {
            conn.setAutoCommit(false);

            String queryCheckPenerima = "SELECT saldo FROM userdata WHERE username = ?";
            PreparedStatement psCheckPenerima = conn.prepareStatement(queryCheckPenerima);
            psCheckPenerima.setString(1, usernamePenerima);
            ResultSet rsPenerima = psCheckPenerima.executeQuery();

            if (!rsPenerima.next()) {
                JOptionPane.showMessageDialog(this, "Username penerima tidak ditemukan!", "Error", JOptionPane.ERROR_MESSAGE);
                conn.rollback();
                return;
            }

            String queryCheckSaldo = "SELECT saldo FROM userdata WHERE username = ?";
            PreparedStatement psCheckSaldo = conn.prepareStatement(queryCheckSaldo);
            psCheckSaldo.setString(1, usernamePengirim);
            ResultSet rsPengirim = psCheckSaldo.executeQuery();

            if (!rsPengirim.next()) {
                JOptionPane.showMessageDialog(this, "Pengguna pengirim tidak ditemukan!", "Error", JOptionPane.ERROR_MESSAGE);
                conn.rollback();
                return;
            }

            int saldoPengirim = rsPengirim.getInt("saldo");

            if (saldoPengirim < nominal) {
                JOptionPane.showMessageDialog(this, "Saldo tidak mencukupi untuk transfer!", "Error", JOptionPane.ERROR_MESSAGE);
                conn.rollback();
                return;
            }

            String queryUpdateSaldoPengirim = "UPDATE userdata SET saldo = saldo - ? WHERE username = ?";
            PreparedStatement psUpdateSaldoPengirim = conn.prepareStatement(queryUpdateSaldoPengirim);
            psUpdateSaldoPengirim.setInt(1, nominal);
            psUpdateSaldoPengirim.setString(2, usernamePengirim);
            psUpdateSaldoPengirim.executeUpdate();

            String queryUpdateSaldoPenerima = "UPDATE userdata SET saldo = saldo + ? WHERE username = ?";
            PreparedStatement psUpdateSaldoPenerima = conn.prepareStatement(queryUpdateSaldoPenerima);
            psUpdateSaldoPenerima.setInt(1, nominal);
            psUpdateSaldoPenerima.setString(2, usernamePenerima);
            psUpdateSaldoPenerima.executeUpdate();

            String queryInsertTransaksiPengirim = "INSERT INTO transaksi (username, jenis_transaksi, nominal, tujuan, tanggal) VALUES (?, ?, ?, ?, NOW())";
            PreparedStatement psInsertTransaksiPengirim = conn.prepareStatement(queryInsertTransaksiPengirim);
            psInsertTransaksiPengirim.setString(1, usernamePengirim);
            psInsertTransaksiPengirim.setString(2, "Transfer Keluar");
            psInsertTransaksiPengirim.setInt(3, nominal);
            psInsertTransaksiPengirim.setString(4, usernamePenerima);
            psInsertTransaksiPengirim.executeUpdate();

            String queryInsertTransaksiPenerima = "INSERT INTO transaksi (username, jenis_transaksi, nominal, tujuan      , tanggal) VALUES (?, ?, ?, ?, NOW())";
            PreparedStatement psInsertTransaksiPenerima = conn.prepareStatement(queryInsertTransaksiPenerima);
            psInsertTransaksiPenerima.setString(1, usernamePenerima);
            psInsertTransaksiPenerima.setString(2, "Transfer Masuk");
            psInsertTransaksiPenerima.setInt(3, nominal);
            psInsertTransaksiPenerima.setString(4, usernamePengirim);
            psInsertTransaksiPenerima.executeUpdate();

            JOptionPane.showMessageDialog(this, "Transfer berhasil!", "Sukses", JOptionPane.INFORMATION_MESSAGE);

        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Terjadi kesalahan: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnTransferActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Home().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCekMutasi;
    private javax.swing.JButton btnCekPin;
    private javax.swing.JButton btnCekSaldo;
    private javax.swing.JButton btnResetPin;
    private javax.swing.JButton btnSetorTunai;
    private javax.swing.JButton btnTarikTunai;
    private javax.swing.JButton btnTransfer;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea txtArea;
    private javax.swing.JLabel user;
    // End of variables declaration//GEN-END:variables
}
